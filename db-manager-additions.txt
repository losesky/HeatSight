# Function to add to db-manager.sh - Initialize news heat score data structure without sample data
init_news_heat_scores_structure() {
  echo -e "${YELLOW}初始化新闻热度评分表结构...${NC}"
  
  # 创建SQL脚本创建表结构但不添加数据
  cat > init_heat_scores_structure.sql << EOF
-- 检查news_heat_scores表是否存在
DO \$\$
BEGIN
  IF NOT EXISTS (SELECT FROM pg_tables WHERE tablename = 'news_heat_scores') THEN
    RAISE NOTICE '创建news_heat_scores表...';
    
    CREATE TABLE IF NOT EXISTS news_heat_scores (
      id VARCHAR PRIMARY KEY,
      news_id VARCHAR NOT NULL,
      source_id VARCHAR NOT NULL,
      title VARCHAR NOT NULL,
      url VARCHAR NOT NULL,
      heat_score FLOAT NOT NULL,
      relevance_score FLOAT,
      recency_score FLOAT,
      popularity_score FLOAT,
      meta_data JSONB,
      keywords JSONB,
      calculated_at TIMESTAMP DEFAULT NOW(),
      published_at TIMESTAMP NOT NULL,
      updated_at TIMESTAMP DEFAULT NOW()
    );
    
    -- 创建索引
    CREATE INDEX IF NOT EXISTS idx_news_heat_scores_news_id ON news_heat_scores (news_id);
    CREATE INDEX IF NOT EXISTS idx_news_heat_scores_source_id ON news_heat_scores (source_id);
    CREATE INDEX IF NOT EXISTS idx_news_heat_scores_heat_score ON news_heat_scores (heat_score);
    CREATE INDEX IF NOT EXISTS idx_news_heat_scores_published_at ON news_heat_scores (published_at);
    
    RAISE NOTICE 'news_heat_scores表创建完成';
  ELSE
    RAISE NOTICE 'news_heat_scores表已存在，跳过创建';
  END IF;
END
\$\$;

-- 显示表结构信息
\d news_heat_scores
EOF

  # 执行SQL脚本
  docker exec -i postgres-local psql -U postgres -d heatsight_dev -f - < init_heat_scores_structure.sql
  
  # 清理临时文件
  rm init_heat_scores_structure.sql
  
  echo -e "${GREEN}新闻热度评分表结构初始化完成!${NC}"
}

# Function to trigger heat score generation via API endpoint
trigger_heat_score_generation() {
  echo -e "${YELLOW}触发新闻热度评分生成...${NC}"
  
  # 检查后端服务是否运行
  echo -e "${YELLOW}检查HeatSight后端服务状态...${NC}"
  
  # 检查服务状态的两种方法：
  # 1. 通过netstat检查端口
  # 2. 直接调用健康检查API
  
  BACKEND_RUNNING=false
  
  # 方法1：检查端口（需要安装net-tools）
  if command -v netstat &> /dev/null; then
    if netstat -tuln | grep ":8080" &> /dev/null; then
      BACKEND_RUNNING=true
      echo -e "${GREEN}检测到HeatSight后端服务正在运行 (端口8080)${NC}"
    fi
  fi
  
  # 方法2：调用健康检查API
  if ! $BACKEND_RUNNING; then
    echo -e "${YELLOW}尝试通过API检查服务状态...${NC}"
    if curl -s "http://localhost:8080/api/health/check" -o /dev/null; then
      BACKEND_RUNNING=true
      echo -e "${GREEN}HeatSight后端服务正在运行 (API检查成功)${NC}"
    else
      echo -e "${RED}无法连接到HeatSight后端服务${NC}"
    fi
  fi
  
  if ! $BACKEND_RUNNING; then
    echo -e "${RED}HeatSight后端服务未运行，无法触发热度评分生成${NC}"
    echo -e "${YELLOW}请先启动后端服务，然后再尝试此操作${NC}"
    echo -e "${YELLOW}启动命令: cd backend && python -m run.py${NC}"
    return 1
  fi
  
  # 调用API触发热度生成
  echo -e "${YELLOW}调用API触发热度评分生成...${NC}"
  API_RESPONSE=$(curl -s -X POST "http://localhost:8080/api/heat-score/update")
  
  if echo "$API_RESPONSE" | grep -q "success"; then
    echo -e "${GREEN}热度评分生成任务已触发，正在后台处理中${NC}"
    echo -e "${YELLOW}API响应: ${API_RESPONSE}${NC}"
    echo -e "${YELLOW}热度评分生成是一个异步过程，可能需要一些时间完成${NC}"
    echo -e "${YELLOW}您可以稍后通过'查看数据库状态'选项检查热度评分数据${NC}"
  else
    echo -e "${RED}触发热度评分生成失败${NC}"
    echo -e "${YELLOW}API响应: ${API_RESPONSE}${NC}"
    return 1
  fi
  
  return 0
}

# Updates to show_db_status function - Add at the end of the function
echo -e "\n${YELLOW}新闻热度评分数据统计:${NC}"
if ! docker exec postgres-local psql -U postgres -d heatsight_dev -c "SELECT COUNT(*) AS total_heat_scores FROM news_heat_scores;" 2>/dev/null; then
  echo -e "${RED}无法查询 news_heat_scores 表，请确保表已创建${NC}"
fi

if docker exec postgres-local psql -U postgres -d heatsight_dev -c "SELECT COUNT(*) AS count FROM news_heat_scores;" 2>/dev/null | grep -q "(0 rows)"; then
  echo -e "${YELLOW}news_heat_scores 表中没有数据，请通过API触发热度评分生成${NC}"
else
  echo -e "\n${YELLOW}热度最高的新闻:${NC}"
  if ! docker exec postgres-local psql -U postgres -d heatsight_dev -c "SELECT id, title, source_id, heat_score FROM news_heat_scores ORDER BY heat_score DESC LIMIT 5;" 2>/dev/null; then
    echo -e "${RED}无法查询热度最高的新闻，请确保 news_heat_scores 表已创建并包含数据${NC}"
  fi
fi

# Update to init_db_structure function - Add after the existing table creation code
init_news_heat_scores_structure

# Update to init_all_data function - DO NOT add init_news_heat_scores since we're using real data
# Instead, add a suggestion to trigger heat score generation
echo -e "${YELLOW}注意: 新闻热度评分数据将通过系统生成，而非预设数据${NC}"
echo -e "${YELLOW}请在数据库初始化完成后，使用菜单选项 '触发热度评分生成' 来生成真实热度数据${NC}"

# Update to main_menu function - Replace the init_news_heat_scores option with these options
echo -e "3.1) ${CYAN}初始化新闻热度评分表结构${NC}"
echo -e "3.2) ${CYAN}触发热度评分生成${NC} (需要后端服务运行)"

# Update to main_menu function - Replace the case statement with these
3.1) 
  init_news_heat_scores_structure
  echo -e "\n${YELLOW}按任意键继续...${NC}"
  read -n1
  ;;
3.2)
  trigger_heat_score_generation
  echo -e "\n${YELLOW}按任意键继续...${NC}"
  read -n1
  ;; 